openapi: 3.0.3
info:
  title: University Grades API
  version: 1.0.0
  description: API for managing university grades and enrollments to courses
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /courses/:
    get:
      operationId: courses_list
      description: A viewset for viewing and editing course instances.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - courses
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourseList'
          description: ''
    post:
      operationId: courses_create
      description: A viewset for viewing and editing course instances.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /courses/{id}/:
    get:
      operationId: courses_retrieve
      description: A viewset for viewing and editing course instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    put:
      operationId: courses_update
      description: A viewset for viewing and editing course instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    patch:
      operationId: courses_partial_update
      description: A viewset for viewing and editing course instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    delete:
      operationId: courses_destroy
      description: A viewset for viewing and editing course instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /docs/api/schema/:
    get:
      operationId: docs_api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - docs
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /students/:
    get:
      operationId: students_list
      parameters:
      - in: query
        name: created_by
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          title: User type
          enum:
          - STUDENT
          - TEACHER
        description: |-
          * `STUDENT` - Student
          * `TEACHER` - Teacher
      tags:
      - students
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: students_create
      tags:
      - students
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /students/{id}/:
    get:
      operationId: students_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - students
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: students_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - students
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: students_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - students
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /subjects/:
    get:
      operationId: subjects_list
      description: A viewset for viewing and editing subject instances.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - subjects
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubjectList'
          description: ''
    post:
      operationId: subjects_create
      description: A viewset for viewing and editing subject instances.
      tags:
      - subjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subject'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Subject'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
          description: ''
  /subjects/{id}/:
    get:
      operationId: subjects_retrieve
      description: A viewset for viewing and editing subject instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this subject.
        required: true
      tags:
      - subjects
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
          description: ''
    patch:
      operationId: subjects_partial_update
      description: A viewset for viewing and editing subject instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this subject.
        required: true
      tags:
      - subjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubject'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubject'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
          description: ''
    delete:
      operationId: subjects_destroy
      description: A viewset for viewing and editing subject instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this subject.
        required: true
      tags:
      - subjects
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /teachers/:
    get:
      operationId: teachers_list
      parameters:
      - in: query
        name: created_by
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          title: User type
          enum:
          - STUDENT
          - TEACHER
        description: |-
          * `STUDENT` - Student
          * `TEACHER` - Teacher
      tags:
      - teachers
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: teachers_create
      tags:
      - teachers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /teachers/{id}/:
    get:
      operationId: teachers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - teachers
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: teachers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - teachers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: teachers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - teachers
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /users/:
    get:
      operationId: users_list
      description: Returns a list of all the existing paginated users with optional
        filters.
      parameters:
      - in: query
        name: created_by
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          title: User role
          enum:
          - ADMIN
          - USER
        description: |-
          * `ADMIN` - Admin
          * `USER` - User
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          title: User type
          enum:
          - STUDENT
          - TEACHER
        description: |-
          * `STUDENT` - Student
          * `TEACHER` - Teacher
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      description: Create a new user. Only admins can create users.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /users/{id}/:
    get:
      operationId: users_retrieve
      description: Returns a single User selected by `id`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: Updates an existing User by `id`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: Deletes an existing User by `id`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          title: Course status
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        subject:
          type: integer
          nullable: true
        teacher:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        students:
          type: array
          items:
            type: integer
          readOnly: true
      required:
      - created_at
      - id
      - name
      - students
      - updated_at
    LevelEnum:
      enum:
      - BACHELOR
      - MASTER
      type: string
      description: |-
        * `BACHELOR` - Bachelor
        * `MASTER` - Master
    PaginatedCourseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Course'
    PaginatedSubjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedCourse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          title: Course status
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        subject:
          type: integer
          nullable: true
        teacher:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        students:
          type: array
          items:
            type: integer
          readOnly: true
    PatchedSubject:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        number_credits:
          type: integer
          maximum: 2147483647
          minimum: 1
        semester:
          type: integer
          maximum: 2147483647
          minimum: 1
          nullable: true
        level:
          allOf:
          - $ref: '#/components/schemas/LevelEnum'
          title: Subject level
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          nullable: true
        prerequisites:
          type: array
          items:
            type: integer
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          title: User role
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: User type
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          nullable: true
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          title: User role
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: User type
      required:
      - email
      - password
    RoleEnum:
      enum:
      - ADMIN
      - USER
      type: string
      description: |-
        * `ADMIN` - Admin
        * `USER` - User
    StatusEnum:
      enum:
      - CREATED
      - IN_PROGRESS
      - ON_HOLD
      - REVIEW
      - FINISHED
      - CANCELLED
      type: string
      description: |-
        * `CREATED` - Created
        * `IN_PROGRESS` - In progress
        * `ON_HOLD` - On hold
        * `REVIEW` - Review
        * `FINISHED` - Finished
        * `CANCELLED` - Cancelled
    Subject:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        number_credits:
          type: integer
          maximum: 2147483647
          minimum: 1
        semester:
          type: integer
          maximum: 2147483647
          minimum: 1
          nullable: true
        level:
          allOf:
          - $ref: '#/components/schemas/LevelEnum'
          title: Subject level
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          nullable: true
        prerequisites:
          type: array
          items:
            type: integer
      required:
      - created_at
      - id
      - name
      - number_credits
      - updated_at
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TypeEnum:
      enum:
      - STUDENT
      - TEACHER
      type: string
      description: |-
        * `STUDENT` - Student
        * `TEACHER` - Teacher
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          title: User role
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: User type
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          nullable: true
      required:
      - created_at
      - email
      - id
      - updated_at
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
